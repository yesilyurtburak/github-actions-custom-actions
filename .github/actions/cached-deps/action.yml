name: 'Get & Cache Dependencies'
description: 'Get the dependencies (via npm) and cache them.'
inputs:
  caching: # custom name
    description: 'Whether to cache dependencies or not.'
    required: false # does user have to provide input value?
    default: 'true' # default value for 'caching' input.
outputs:
  used-cache: # custom name for return parameter
    description: 'Whether the cache was used.'
    value: ${{ steps.install.outputs.cache }} # context.id_name.outputs.key_name
    # took the value from environment variable 'cache' which is defined in 'install' step.
runs:
  using: 'composite'
  steps:
    - name: Cache dependencies
      if: inputs.caching == 'true' # run this step if this condition met.
      id: cache
      uses: actions/cache@v3
      with:
        path: node_modules
        key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
    - name: Install dependencies
      id: install
      if: steps.cache.outputs.cache-hit != 'true' || inputs.caching != 'true'
      run: |
        npm ci
        echo "cache=${{ inputs.caching }}" >> $GITHUB_OUTPUT
      # add input parameter's value to environment variable like cache:value
      shell: bash